@page
@model BAIS3230Project.Pages.TeeTimes.CreateModel

@{
    ViewData["Title"] = "Create";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<h1>Create</h1>

<h4>Tee Time</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="newTeeTime.TeeDate" class="control-label"></label>
                <input asp-for="newTeeTime.TeeDate" class="form-control" type="date" id="teeDate" />

                <span asp-validation-for="newTeeTime.TeeDate" class="text-danger"></span>
            </div>
@*old style of tee time selection*@
@*             <div class="form-group">
                <label asp-for="newTeeTime.ScheduledTeeTime" class="control-label"></label>
                <input asp-for="newTeeTime.ScheduledTeeTime" class="form-control" type="time" />
                <span asp-validation-for="newTeeTime.ScheduledTeeTime" class="text-danger"></span>
            </div> *@

            <div class="form-group">
                <label asp-for="newTeeTime.ScheduledTeeTime" class="control-label"></label>
                <select asp-for="newTeeTime.ScheduledTeeTime" class="form-control" id="teeTimeDropdown">
                    <option value="">-- Select a time --</option>
                    @* This will be populated dynamically *@
                </select>
            </div>


            @*do if statement here, *@
@*             <div class="form-group">
                <label asp-for="newTeeTime.MemberID" class="control-label"></label>
				<input type="hidden" asp-for="newTeeTime.MemberID" />
                <span asp-validation-for="newTeeTime.MemberID" class="text-danger"></span>
            </div> *@

            @if (User.IsInRole("Admin") || User.IsInRole("Clerk") || User.IsInRole("ProShop"))
            {
                <div class="form-group">
                    <label asp-for="newTeeTime.MemberID" class="control-label"></label>
                    <select asp-for="newTeeTime.MemberID" class="form-control" asp-items="@(new SelectList(Model.MemberOptions, "MemberID", "FullName"))">
                        <option value="">-- Select a Member --</option>
                    </select>
                    <span asp-validation-for="newTeeTime.MemberID" class="text-danger"></span>
                </div>
            }
            else
            {
                <input type="hidden" asp-for="newTeeTime.MemberID" />
            }


            <div class="form-group">
                <label asp-for="newTeeTime.NumberOfPlayers" class="control-label"></label>
                <input asp-for="newTeeTime.NumberOfPlayers" class="form-control" />
                <span asp-validation-for="newTeeTime.NumberOfPlayers" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="newTeeTime.Phone" class="control-label"></label>
                <input asp-for="newTeeTime.Phone" class="form-control" />
                <span asp-validation-for="newTeeTime.Phone" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="newTeeTime.NumberOfCarts" class="control-label"></label>
                <input asp-for="newTeeTime.NumberOfCarts" class="form-control" />
                <span asp-validation-for="newTeeTime.NumberOfCarts" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>

            <!-- Display model errors here -->
            @if (!ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <ul>
                        @foreach (var error in ModelState.Values.SelectMany(v => v.Errors))
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                </div>
            }
        </form>
    </div>
</div>
@Model.Message

<div>
    <a asp-page="Index">Back to List</a>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const dateInput = document.getElementById('teeDate');
            const dropdown = document.getElementById('teeTimeDropdown');

            if (!dateInput || !dropdown) {
                console.error("Required elements not found: teeDate or teeTimeDropdown");
                return;
            }

        dateInput.addEventListener('change', function () {
            const selectedDate = this.value;

            fetch(`?handler=AvailableTimes&date=${selectedDate}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Failed to fetch available times");
                    }
                    return response.json();
                })
                .then(times => {
                    dropdown.innerHTML = '<option value="">-- Select a time --</option>';
                    times.forEach(t => {
                        const option = document.createElement('option');
                        option.value = t;
                        option.text = t;
                        dropdown.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error("Error:", error);
                });

            console.log("Selected date:", selectedDate);
        });
        });
    </script>

@*     <script>
        document.addEventListener('DOMContentLoaded', function () {
            const dateInput = document.getElementById('teeDate');
            const dropdown = document.getElementById('teeTimeDropdown');

            if (!dateInput || !dropdown) {
                console.error("Required elements not found: teeDate or teeTimeDropdown");
                return;
            }

            dateInput.addEventListener('change', function () {
                const selectedDate = this.value;

                // Get the user's role dynamically
                const role = '@User.Identity.Name';  // This assumes your role is part of the user identity

                fetch(`?handler=AvailableTimes&date=${selectedDate}&role=${role}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("Failed to fetch available times");
                        }
                        return response.json();
                    })
                    .then(blockedTimes => {
                        dropdown.innerHTML = '<option value="">-- Select a time --</option>';

                        const startTime = 7; // Start at 7 AM
                        const endTime = 20; // End at 8 PM
                        let increment = 7; // Start with 7-minute interval

                        for (let hour = startTime; hour < endTime; hour++) {
                            for (let min = 0; min < 60; ) {
                                // Format the time to HH:mm
                                const time = new Date(0, 0, 0, hour, min, 0, 0);
                                const timeString = time.toTimeString().substr(0, 5); // Format as HH:mm

                                const option = document.createElement('option');
                                option.value = timeString;
                                option.text = timeString;

                                if (blockedTimes.includes(timeString)) {
                                    option.disabled = true; // Disable the option if it's blocked
                                }

                                dropdown.appendChild(option);

                                // Update the increment for the next time slot (7 min for first, 8 min for subsequent)
                                min += increment;
                                increment = (increment === 7) ? 8 : 7;  // Alternate between 7 and 8 minutes
                            }
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                    });
            });
        });
    </script> *@
}
